- name: Install & configure Nagios4 on Ubuntu 22.04
  hosts: all
  become: yes

  vars:
    # Доступ к вебу Nagios:
    # "all granted"  — без пароля
    # 'ip 1.2.3.4/32' — только с конкретного IP/подсети
    # 'valid-user'    — потребовать пароль (см. блок auth ниже)
    nagios_access_rule: "all granted"

    # Файлы и пути
    nagios_conf_file: /etc/apache2/conf-available/nagios4-cgi.conf
    nagios_htpasswd:  /etc/nagios4/htpasswd.users
    nagios_admin_user: nagiosadmin
    nagios_admin_password: "ChangeMe123!"

  pre_tasks:
    - name: Enable universe repo
      ansible.builtin.command: add-apt-repository universe -y
      args:
        creates: /etc/apt/sources.list.d/universe.list

    - name: Ensure sane apt sources for Ubuntu 22.04 (jammy)
      ansible.builtin.copy:
        dest: /etc/apt/sources.list
        mode: '0644'
        content: |
          deb http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu jammy-backports main restricted universe multiverse
          deb http://security.ubuntu.com/ubuntu jammy-security main restricted universe multiverse
      when: ansible_distribution_release == 'jammy'

    - name: Update apt cache (fresh)
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 0

  tasks:
    - name: Install Apache, Nagios and deps
      ansible.builtin.apt:
        name:
          - apache2
          - apache2-utils
          - nagios4
          - nagios-nrpe-plugin
        state: present

    - name: Enable CGI module for Apache
      ansible.builtin.command: a2enmod cgi
      args:
        creates: /etc/apache2/mods-enabled/cgi.load
      notify: Reload Apache

    # --- (A) Конфиг без пароля: открытый доступ к /nagios4 и /cgi-bin/nagios4 ---
    - name: Write Nagios Apache config (open access)
      ansible.builtin.copy:
        dest: "{{ nagios_conf_file }}"
        owner: root
        group: root
        mode: '0644'
        content: |
          # Generated by Ansible — Nagios aliases (both /nagios and /nagios4)
          ScriptAlias /cgi-bin/nagios4 /usr/lib/cgi-bin/nagios4
          ScriptAlias /cgi-bin/nagios  /usr/lib/cgi-bin/nagios4
          Alias /nagios4 /usr/share/nagios4/htdocs
          Alias /nagios  /usr/share/nagios4/htdocs

          <Directory "/usr/share/nagios4/htdocs">
              Options FollowSymLinks
              AllowOverride None
              Require {{ nagios_access_rule }}
          </Directory>

          <Directory "/usr/lib/cgi-bin/nagios4">
              Options ExecCGI
              AllowOverride None
              Require {{ nagios_access_rule }}
          </Directory>
      when: nagios_access_rule != 'valid-user'
      notify: Reload Apache

    # --- (B) Конфиг с паролем: BasicAuth ---
    - name: Ensure htpasswd exists when using valid-user
      ansible.builtin.shell: |
        set -e
        if [ ! -f "{{ nagios_htpasswd }}" ]; then
          printf '%s\n' '{{ nagios_admin_password }}' | htpasswd -ci '{{ nagios_htpasswd }}' '{{ nagios_admin_user }}'
        else
          printf '%s\n' '{{ nagios_admin_password }}' | htpasswd -i '{{ nagios_htpasswd }}' '{{ nagios_admin_user }}'
        fi
      args: { executable: /bin/bash }
      no_log: true
      when: nagios_access_rule == 'valid-user'

    - name: Write Nagios Apache config (password-protected)
      ansible.builtin.copy:
        dest: "{{ nagios_conf_file }}"
        owner: root
        group: root
        mode: '0644'
        content: |
          # Generated by Ansible — password-protected access to Nagios
          ScriptAlias /cgi-bin/nagios4 /usr/lib/cgi-bin/nagios4
          Alias /nagios4 /usr/share/nagios4/htdocs

          <Directory "/usr/share/nagios4/htdocs">
              Options FollowSymLinks
              AllowOverride None
              AuthType Basic
              AuthName "Nagios Access"
              AuthUserFile {{ nagios_htpasswd }}
              Require valid-user
          </Directory>

          <Directory "/usr/lib/cgi-bin/nagios4">
              Options ExecCGI
              AllowOverride None
              AuthType Basic
              AuthName "Nagios CGI"
              AuthUserFile {{ nagios_htpasswd }}
              Require valid-user
          </Directory>
      when: nagios_access_rule == 'valid-user'
      notify: Reload Apache

    - name: Enable nagios4 Apache conf
      ansible.builtin.command: a2enconf nagios4-cgi
      args:
        creates: /etc/apache2/conf-enabled/nagios4-cgi.conf
      notify: Reload Apache

    # === КЛЮЧЕВОЕ ДОПОЛНЕНИЕ: патчим пакетный /etc/nagios4/apache2.conf,
    # чтобы он не переопределял доступ (иначе CSS/картинки могут не отдаваться) ===
    - name: Override vendor /etc/nagios4/apache2.conf with our access rule
      ansible.builtin.blockinfile:
        path: /etc/nagios4/apache2.conf
        marker: "# {mark} MANAGED BY ANSIBLE (Nagios access override)"
        block: |
          # Ansible override: support both /nagios and /nagios4
          <Directory "/usr/share/nagios4/htdocs">
            Options FollowSymLinks
            AllowOverride None
            {% if nagios_access_rule == 'valid-user' -%}
            AuthType Basic
            AuthName "Nagios Access"
            AuthUserFile {{ nagios_htpasswd }}
            Require valid-user
            {%- else -%}
            Require {{ nagios_access_rule }}
            {%- endif %}
          </Directory>

          <Directory "/usr/lib/cgi-bin/nagios4">
            Options ExecCGI
            AllowOverride None
            {% if nagios_access_rule == 'valid-user' -%}
            AuthType Basic
            AuthName "Nagios CGI"
            AuthUserFile {{ nagios_htpasswd }}
            Require valid-user
            {%- else -%}
            Require {{ nagios_access_rule }}
            {%- endif %}
          </Directory>
      notify: Reload Apache

    - name: Validate Apache config
      ansible.builtin.command: apache2ctl -t
      changed_when: false

    - name: Enable and start Apache and Nagios services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - apache2
        - nagios4

  handlers:
    - name: Reload Apache
      ansible.builtin.systemd:
        name: apache2
        state: reloaded
